<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ifuryst.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ifuryst.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-14T15:29:14+00:00</updated><id>https://ifuryst.github.io/feed.xml</id><title type="html">ifuryst</title><subtitle>📝 &amp; 💭 </subtitle><entry><title type="html">从语义化排序看未来算法和工程的变化</title><link href="https://ifuryst.github.io/blog/2025/llm-in-sort/" rel="alternate" type="text/html" title="从语义化排序看未来算法和工程的变化"/><published>2025-02-14T15:28:27+00:00</published><updated>2025-02-14T15:28:27+00:00</updated><id>https://ifuryst.github.io/blog/2025/llm-in-sort</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/llm-in-sort/"><![CDATA[<p>今天我看到 <a href="https://github.com/vagos/llm-sort">llm-sort</a> 这个项目，它是基于一篇<a href="https://arxiv.org/abs/2306.17563">论文</a>开发的一个小工具，主要用于文本排序。传统排序通常依赖于字母序或数字序，例如按照 A-Z 或 0-9 进行排序。而llm-sort的核心思路是将这种排序方式提升到语义层面，即利用大模型来进行更智能的排序。</p> <p>在传统排序算法中，我们的比较逻辑是基于字符或数值的大小关系，比如判断 A 是否大于 B，然后决定它们的相对顺序。而llm-sort本质上仍然是一个排序算法，只不过它的比较逻辑不再是简单的字符对比，而是基于LLM去做比较。这意味着我们仍然可以沿用经典的排序算法（如快速排序、插入排序等），但原子级别的比较操作被大模型取代，从而实现更智能的排序</p> <p>这种能力的提升带来了非常有趣的应用场景。例如，我们有一万个名字，希望找出最适合给家里的小狗命名的那些。传统排序方式可能只能按照字母序排列，而通过llm-sort，我们可以根据语义来排序。</p> <p>我们还可以增加一些关于狗狗的描述，比如活泼好动、喜欢粘人等等，我们可以将这些特性作为条件输入LLM，让它为我们推荐更适合的狗名。LLM会基于这些描述来理解哪些名字更符合这类狗的特性，并将它们排在前面。这只是一个简单的例子，实际上，我们可以添加更多复杂的条件，让排序更加精准和个性化。</p> <p>这一能力在搜索引擎、推荐系统等领域的应用前景极为广阔。目前的个性化推荐通常基于关键词关联、TF-IDF、用户行为分析等方式，例如：</p> <ul> <li>电商网站的猜你喜欢功能，主要依赖于标签匹配、词频计算、点击率等方法。</li> <li>搜索引擎会根据相关度排序，但排序逻辑主要基于关键字匹配，而非真正的语义理解。</li> </ul> <p>未来，结合大模型的排序方式可以大幅提升推荐质量。例如，当用户搜索吹风机时，系统可以分析商品的标题、详情页、用户评价、品牌认知等多种因素，并结合用户的偏好进行更精准的排序。这样排在前面的商品更符合用户的需求，能极大地提升购买转化率，也能尽快节省用户的时间。（发散一下：其实未来的搜索甚至直接是通过语音之类的自然语言搜索了，就跟去线下店里和导购交流我要什么意义。不过这边依然有反面的，就是广告主仍然可以竞拍被LLM优先采纳，这或许就是广告模式驱动的商业世界吧）</p> <p>这一技术还可以广泛应用于社交媒体推荐算法（如抖音、小红书等），让推你喜欢的内容推荐变得更加精准，而不只是基于简单的标签或算法推测（这无疑也让奶头乐发挥到极致🥲）</p> <p>值得一提，很多人认为应用LLM只需要写个 prompt 让它生成结果，看似很简单。但真正的挑战在于如何将LLM有效地融入到实际的工程体系中，解决现实问题。</p> <p>在大型工程系统中，涉及上下游的服务非常庞杂，而如何在这些系统中逐步引入大模型，使其真正发挥价值，这不仅是技术问题，更涉及产品设计理念和对新技术的敏感度。这种能力不是简单地做个demo展示一下的那种难度级别，而是需要深入理解场景，合理设计应用方式。</p> <p>总结来说，llm-sort让排序算法从传统的字符比对升级到了语义层面，这一小小的变化，实则带来了巨大的可能性。在业务里大大小小的地方都会陆续被LLM渗透进去，人类再一次给自己构建的世界制造了很大的想象空间啊</p>]]></content><author><name></name></author><category term="insights"/><category term="insights"/><summary type="html"><![CDATA[今天我看到 llm-sort 这个项目，它是基于一篇论文开发的一个小工具，主要用于文本排序。传统排序通常依赖于字母序或数字序，例如按照 A-Z 或 0-9 进行排序。而llm-sort的核心思路是将这种排序方式提升到语义层面，即利用大模型来进行更智能的排序。]]></summary></entry><entry><title type="html">AI在广告的应用</title><link href="https://ifuryst.github.io/blog/2025/ai-in-ads/" rel="alternate" type="text/html" title="AI在广告的应用"/><published>2025-02-13T00:30:27+00:00</published><updated>2025-02-13T00:30:27+00:00</updated><id>https://ifuryst.github.io/blog/2025/ai-in-ads</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/ai-in-ads/"><![CDATA[<p>今天在Newsletter里看到一篇文章，介绍了 Pinterest 如何将 AI 应用于产品和业务，尤其是在广告服务（ads）中的应用。Pinterest 通过 AI 个性化定制用户所看到的内容，根据用户喜好自动生成背景图等素材，从而提升广告效果。例如，一些保健品或药品销售商可以利用 AI 技术，更精准地针对目标用户群体生成和推送广告，提高转化率</p> <p>个性化广告投放无疑是未来的重要发展方向。除了 Pinterest，Meta和 Google 之类的公司也在积极探索 AI 在广告推广中的应用。目前，还没有哪家公司能完全掌握 AI 广告的最佳实践。各公司或平台还是需要结合自身的产品、内容和受众特点，定制化地将 AI 融入广告系统，才能最大化AI为广告推送带来更大的效益</p> <p>传统广告投放往往需要广告主准备大量的素材（如图片、视频、文案等），但 AI 可以帮助广告主在保持原有素材的基础上，甚至使用更少的素材，生成更符合目标用户需求的广告内容。例如，如果广告主针对年轻的养宠物群体投放狗粮或猫粮广告，AI 可以基于产品理念、说明书、规格等信息，自动生成适合该群体的图文或视频广告，而无需广告主额外花费大量精力制作新素材。另外AI 也不一定要为每个用户单独生成内容，而是可以针对某一类用户群体，自动生成相应的广告展示素材，从而提升广告投放的效率。这些无疑都是未来广告领域可见的一些方向。</p> <p>不过AI 在广告中的应用也面临了一些挑战，比如模型的准确性、内容的可信度，以及可能出现的幻觉等问题。不过我还是相信随着大模型的成本下降、效果提升和一些新的技术演进，这些问题能在一定程度上解决，最终能否完全解决，仍然取决于工程化的结合和技术的持续发展。</p> <p>从更宏观的角度来看，传统计算机技术依赖确定性，例如 1+1=2，正是这种确定性奠定了计算机技术长期发展的基础。但是在AI时代， 技术本质上并非是确定性的性质，而是更具语义化特征，类似于人类的语言表达——同一个意思可以有多种不同的表达方式。在这样的框架下，后续不能过度追求 AI 生成内容的确定性，或许以最终的实际效果为导向是更好的思维和实践方式。像特斯拉的自动驾驶采用端到端 AI 模型，虽然无法精确预测每一步的输出，但能确保最终的驾驶行为符合预期。这或许代表了一种思维模式的转变，即我们应该更加关注 AI 系统的最终结果，而非单一过程的确定性。</p>]]></content><author><name></name></author><category term="insights"/><category term="insights"/><summary type="html"><![CDATA[今天在Newsletter里看到一篇文章，介绍了 Pinterest 如何将 AI 应用于产品和业务，尤其是在广告服务（ads）中的应用。Pinterest 通过 AI 个性化定制用户所看到的内容，根据用户喜好自动生成背景图等素材，从而提升广告效果。例如，一些保健品或药品销售商可以利用 AI 技术，更精准地针对目标用户群体生成和推送广告，提高转化率]]></summary></entry><entry><title type="html">Congrats on ICLR 2025!</title><link href="https://ifuryst.github.io/blog/2025/congrats-on-iclr-2025/" rel="alternate" type="text/html" title="Congrats on ICLR 2025!"/><published>2025-02-11T14:22:27+00:00</published><updated>2025-02-11T14:22:27+00:00</updated><id>https://ifuryst.github.io/blog/2025/congrats-on-iclr-2025</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/congrats-on-iclr-2025/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-11-congrats-on-iclr-2025/iclr2025-480.webp 480w,/assets/img/2025-02-11-congrats-on-iclr-2025/iclr2025-800.webp 800w,/assets/img/2025-02-11-congrats-on-iclr-2025/iclr2025-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-11-congrats-on-iclr-2025/iclr2025.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Paper on ICLR 2025. </div> <p><a href="https://github.com/All-Hands-AI/OpenHands">OpenHands（前OpenDevin）</a>的论文被ICLR 2025接受啦🎉</p> <p>现在已经45K的Start🌟，5K的Fork，时光荏苒啊。会想去年和大家一起写Paper，跑Benchmark，真实是一篇整个社区贡献的paper，感觉很棒。</p> <p>这个邮件也标志着我慢慢的从这个项目淡出了，2024年上半年花了很多时间在这个项目里贡献和结实一些优秀的人，现在我有更多我想做的事情，我慢慢的从这个项目里走开了，我觉得这个无可厚非，人生就是这样一段又一段的经历组成，才成就了现在的我们。祝愿还在项目里活跃的伙伴们能越走越远，不忘初心。</p>]]></content><author><name></name></author><category term="Life"/><category term="Life"/><summary type="html"><![CDATA[Paper on ICLR 2025.]]></summary></entry><entry><title type="html">Back Online! Let’s Rock 2025</title><link href="https://ifuryst.github.io/blog/2025/lets-rock-2025/" rel="alternate" type="text/html" title="Back Online! Let’s Rock 2025"/><published>2025-02-11T14:12:27+00:00</published><updated>2025-02-11T14:12:27+00:00</updated><id>https://ifuryst.github.io/blog/2025/lets-rock-2025</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/lets-rock-2025/"><![CDATA[<p>春节去美国玩了半个月，第一次去美国，这次旅程有很多收获，感觉成长了很多，后续有空再展开仔细说说这次美国之行的一些有趣的东西。这次半个月，算是Going Offline了半个月，一年有这样的一段时间还挺好的。</p> <p>我从美国背回来几本书，路上就在看The Nvidia Way，以前也看过类似这种公司或者个人的成长记录，但是这次意外的有很多感受，也坚定了一些我之前的想法和行为。</p> <p>为什么是这个标题呢，一个是跟大家说我在线了，可以继续开干了，另外一句是坚定了2025我会继续按照我的节奏往前突进。今天有个网友walker给我写邮件找我交流了无聊的世界，在我给他的回信中我写到了这样一段话：</p> <blockquote> <p>我觉得这两年似乎站在了一个时代变革的节点，我还是挺相信AI能给这个社会和个人带来很多价值的，今天看newsletter，里面有说到未来可能会出现一人的独角兽公司，我觉得还是有一定的可能的。以前说逆水行舟不进则退，现在我倒是感觉在时代的长河里，我们不是逆流，只是水流的速度越来越快，如果我们一直以一样的速度前行，相对而言我们就是一直在往后走，所以这个时代告诉变化本身就给不断向前的人一些无形的压力，有一点像是爱丽丝梦游仙境里那个意思了，我们努力奔跑只是为了留在原地。希望不要被时代抛下啊</p> </blockquote> <p>代表了我的一部分想法。AI时代，每个人的边界都极大扩大了，本来不太可能的东西也变得更加有可能了，我坚信AI必定能带我去到更高的地方</p> <p>整个2024我的收获大到可怕，我希望2025还能用这样的速度继续前进，也期待和一些有想法的人多聊聊，不断是同行还是各行各业的老板或者是远在国外的友人。新的一年，Let’s Rock! 🪨</p>]]></content><author><name></name></author><category term="Life"/><category term="Life"/><summary type="html"><![CDATA[春节去美国玩了半个月，第一次去美国，这次旅程有很多收获，感觉成长了很多，后续有空再展开仔细说说这次美国之行的一些有趣的东西。这次半个月，算是Going Offline了半个月，一年有这样的一段时间还挺好的。]]></summary></entry><entry><title type="html">My 2024 Recap 💫</title><link href="https://ifuryst.github.io/blog/2024/my-2024-recap/" rel="alternate" type="text/html" title="My 2024 Recap 💫"/><published>2024-12-26T15:43:27+00:00</published><updated>2024-12-26T15:43:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/my-2024-recap</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/my-2024-recap/"><![CDATA[<p>今年挺精彩的，从世界的角度或者个人的角度，我觉得都值得回顾一下</p> <p>一晃已是New Yr，今年发生了还多事情啊，更加充实、自我提升的一年，我还挺满意的，虽然有那么几天因为身体缘故感觉到很累，但是整体还是很Nice的。</p> <p>今年算是正式开始接触LLM的一年，也是今年年初开始大量开始投入到AI应用的研发，首先是有幸参与了OpenDevin（先已更名为OpenHands，截止目前已有39K⭐️）从最开始的参与者，到成为Maintainer，再到后来Robert、Xingyao和Graham他们成立All Hands AI，以及在随后的时间内拉到$5M的融资，虽然有点小遗憾没有办法加入他们一起奋斗，但是还是很高兴这一路来的历程，见识到了好多牛逼的人，企业层面有字节、微软、阿里的，学校层面有CMU、UIUC等，国家更是跨越几乎每个大洲了。磕磕碰碰和大家用英语交流，也学会了很多黑话，是非常棒的一段经历。Keep Engaging.</p> <p>后来也陆续和几位小伙伴开发出了一下有趣的AI应用，这一块也将我的业余时间燃烧掉一大部分。这块也将是后续会持续投入的领域，我觉得AI远不止于此，还有很多机会的。今年跟资讯跟得很勤，几乎每天都可以看到有新的LLM Related Projects出来，每天都有新的Paper，每天都有融资新闻，每天都有各种AI新闻。这种状况是我从没见过的，堪比互联网浪潮，有点09年时候的感觉了，一切都是新鲜的，也有一群在新世界探索的人。Keep Doing.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-12-26-my-2024-recap/medium-well-pls-480.webp 480w,/assets/img/2024-12-26-my-2024-recap/medium-well-pls-800.webp 800w,/assets/img/2024-12-26-my-2024-recap/medium-well-pls-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-12-26-my-2024-recap/medium-well-pls.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Medium Well Please </div> <p>今年也是学习的一年，每个工作日都练口语这件事我确实是认真的，一年多了， 如果用我pyq发的这张牛排熟度来说的话，保守一点目前应该能到medium-rare了，ChatGPT永远是我最最棒的partner。今年也陆续看了一堆英语书，跟海绵一样每天会吸纳很多英文新闻和Podcast，输入和输出兼顾，还是能有很好的提升，不过我感觉还是不够用心的去craft如何提升的路径，不过我倒是觉得与其挖空心思去考虑这些，倒不如用自己更能接受的轻松方式，然后去坚持，有效的坚持必然会有收获的。马上就要去🇺🇸了，可以再次实践自己的口语能力了。Keep Practising.</p> <p>今年也从GitHub收到了好多人发邮件给我，有一部分是工作机会，很多是从🇺🇸的startup找来的，我觉得还蛮惊喜的，也挺高兴的，原来恢复写blog的一个原因就是我不希望别人是通过我的履历来了解定性我，我希望能通过字里行间以及我在做的事情，来让有兴趣的人感受到我是什么样的人，我觉得这能减少很多的误解和摩擦，不过是提供工作机会还是有技术、项目的交流。我也写了第一份全英Resume，第一次体验全英文面试，说不慌是不可能的，口吐芬芳了已经。明年也会坚持在这块做输出，我觉得很多时候自己做的没有去回顾，去复盘，去总结，过段时间就忘记了，有些很不错的想法、经验，这样流逝掉了还挺可惜的。Keep Fighting.</p> <p>极限运动确实不太适合我，甚至过山车也坐不了一点了，今年还是去🇰🇷玩了一下（第一次去非英语国家，突然就明白象形字有多难顶），顺便尝试了滑雪，简单说就是从早上摔到晚上吧，膝盖和屁股不太行了，不过我还挺喜欢滑雪的，我觉得等我觉得自己可以不那么拼的时候，我会考虑认真去学一下滑雪，然后去阿尔卑斯滑一次，一开始我觉得单板🏂比较酷，但是在深入了解了滑雪文化和一些人的故事，我发现我现在反而更喜欢双板🎿，尝试一个新事物，并且喜欢上，是一件很棒的事情。Keep Exploring.</p> <p>今年我对于经济、金融方面有了更加深刻的理解，背景当然是依托于大环境下的经济问题，从历史的角度，更宏观的角度来看，个人的努力只能决定一定范围内的东西，在经济好的年代的人和经济不景气年代的人，会有截然不同的观点和行为。基于自身过往的赚钱和投资经历来看，有得有失，现在对于财务情况和资产处置有了更高的理解了，渐渐明白，随着阅历和见识的增加，人是可以变得更加牛的（词汇量匮乏，反正就是牛吧）。Keep Investing.</p> <p>我还记得在120个孩子的东北老爸里看到的一句话：若要如何，全凭自己。我觉得这句话还挺合适用来概括2024年的我背后的动机。就像远航的船，最怕的就是没有目标。不管路上遇到的是滔天巨浪、狂风暴雨或是平静无风的海面，不管需要绕行多远，终将到达的不是生命的终点，就是永远不可触达的存在意识形态层面的目标。或许这样的目标并不存在，也永远不可到达，但这或许也是一种仁慈，我不怕目标不可达，怕的是达到后的迷茫</p>]]></content><author><name></name></author><category term="Life"/><category term="Life"/><summary type="html"><![CDATA[今年挺精彩的，从世界的角度或者个人的角度，我觉得都值得回顾一下]]></summary></entry><entry><title type="html">Default Ingress Class</title><link href="https://ifuryst.github.io/blog/2024/default-ingress-class/" rel="alternate" type="text/html" title="Default Ingress Class"/><published>2024-12-19T14:47:27+00:00</published><updated>2024-12-19T14:47:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/default-ingress-class</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/default-ingress-class/"><![CDATA[<p>最近遇到一个问题，就是Ingress配置错误问题导致了到Ingress的流量始终无法流到对应的Service</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">extensions/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">playground</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">api-test.ifuryst.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">playground</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">2112</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/metrics</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">ImplementationSpecific</span>
  <span class="na">tls</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">api-test.ifuryst.com</span>
      <span class="na">secretName</span><span class="pi">:</span> <span class="s">api</span>
</code></pre></div></div> <p>问题是这样一个Ingress配置，看起来没有问题，但是一直没生效，从Service走是OK的，这期间其实反复确认并重做了好几次，也有在rancher上做，最后才排查定位到是少了这个，其实根本原因是因为集群没有配置默认的IngressClass，所以在不配置的情况之下是不会走到Ingress的</p> <p>问题我觉得是个小问题，但是我还是去翻看了一下kube-apiserver和ingress-nginx的代码，这边通过minikube直接本地拉一个集群观测，这样有需要的可以根据命令自己跑测一下。</p> <p>另外为了对比，我增加安装了traefik。</p> <p>初始化相关命令</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># start k8s cluster</span>
<span class="s">minikube start</span>
<span class="c1"># install ingres-nginx</span>
<span class="s">helm upgrade --install ingress-nginx ingress-nginx \</span>
  <span class="s">--repo https://kubernetes.github.io/ingress-nginx \</span>
  <span class="s">--namespace ingress-nginx --create-namespace</span>
<span class="c1"># install trafik</span>
<span class="s">helm repo add traefik https://traefik.github.io/charts</span>
<span class="s">helm repo update</span>
<span class="s">helm install traefik traefik/traefik --namespace traefik --create-namespace</span>
</code></pre></div></div> <p>通过<code class="language-plaintext highlighter-rouge">kubectl get ingressclasses -o yaml</code> 可以看到ingrss-nginx的配置</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">items</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">IngressClass</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">meta.helm.sh/release-name</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
        <span class="na">meta.helm.sh/release-namespace</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
      <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2024-12-04T03:35:34Z"</span>
      <span class="na">generation</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app.kubernetes.io/component</span><span class="pi">:</span> <span class="s">controller</span>
        <span class="na">app.kubernetes.io/instance</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
        <span class="na">app.kubernetes.io/managed-by</span><span class="pi">:</span> <span class="s">Helm</span>
        <span class="na">app.kubernetes.io/name</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
        <span class="na">app.kubernetes.io/part-of</span><span class="pi">:</span> <span class="s">ingress-nginx</span>
        <span class="na">app.kubernetes.io/version</span><span class="pi">:</span> <span class="s">1.11.3</span>
        <span class="na">helm.sh/chart</span><span class="pi">:</span> <span class="s">ingress-nginx-4.11.3</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">nginx</span>
      <span class="na">resourceVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">969"</span>
      <span class="na">uid</span><span class="pi">:</span> <span class="s">158fe0a7-0701-45eb-a7f9-e37a5e026afe</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">controller</span><span class="pi">:</span> <span class="s">k8s.io/ingress-nginx</span>
  <span class="pi">-</span> <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">IngressClass</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">ingressclass.kubernetes.io/is-default-class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
        <span class="na">meta.helm.sh/release-name</span><span class="pi">:</span> <span class="s">traefik</span>
        <span class="na">meta.helm.sh/release-namespace</span><span class="pi">:</span> <span class="s">traefik</span>
      <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2024-12-04T03:37:14Z"</span>
      <span class="na">generation</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app.kubernetes.io/instance</span><span class="pi">:</span> <span class="s">traefik-traefik</span>
        <span class="na">app.kubernetes.io/managed-by</span><span class="pi">:</span> <span class="s">Helm</span>
        <span class="na">app.kubernetes.io/name</span><span class="pi">:</span> <span class="s">traefik</span>
        <span class="na">helm.sh/chart</span><span class="pi">:</span> <span class="s">traefik-33.0.0</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">traefik</span>
      <span class="na">resourceVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1226"</span>
      <span class="na">uid</span><span class="pi">:</span> <span class="s">98b32f2f-d8a9-47d1-b5f6-bd63e1a01fac</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">controller</span><span class="pi">:</span> <span class="s">traefik.io/ingress-controller</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">List</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">resourceVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
</code></pre></div></div> <p>这边从<code class="language-plaintext highlighter-rouge">ingressclass.kubernetes.io/is-default-class: "true"</code>其实可以看出来，ingress-nginx默认是没有将自己提升为默认的IngressClass，而traefik却有，我们到kube-apiserver里看一下</p> <p>在<code class="language-plaintext highlighter-rouge">staging/src/k8s.io/api/networking/v1/well_known_annotations.go</code> 和<code class="language-plaintext highlighter-rouge">staging/src/k8s.io/api/networking/v1beta1/well_known_annotations.go</code> 出现了这个配置，这边我们关注一下v1</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">v1</span>

<span class="k">const</span> <span class="p">(</span>
	<span class="c">// AnnotationIsDefaultIngressClass can be used to indicate that an</span>
	<span class="c">// IngressClass should be considered default. When a single IngressClass</span>
	<span class="c">// resource has this annotation set to true, new Ingress resources without a</span>
	<span class="c">// class specified will be assigned this default class.</span>
	<span class="n">AnnotationIsDefaultIngressClass</span> <span class="o">=</span> <span class="s">"ingressclass.kubernetes.io/is-default-class"</span>
<span class="p">)</span>
</code></pre></div></div> <p>可以看下调用方，主要是<code class="language-plaintext highlighter-rouge">plugin/pkg/admission/network/defaultingressclass/admission.go</code> 在调用</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// getDefaultClass returns the default IngressClass from the store, or nil.</span>
<span class="k">func</span> <span class="n">getDefaultClass</span><span class="p">(</span><span class="n">lister</span> <span class="n">networkingv1listers</span><span class="o">.</span><span class="n">IngressClassLister</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">networkingv1</span><span class="o">.</span><span class="n">IngressClass</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">list</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">lister</span><span class="o">.</span><span class="n">List</span><span class="p">(</span><span class="n">labels</span><span class="o">.</span><span class="n">Everything</span><span class="p">())</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">defaultClasses</span> <span class="o">:=</span> <span class="p">[]</span><span class="o">*</span><span class="n">networkingv1</span><span class="o">.</span><span class="n">IngressClass</span><span class="p">{}</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">class</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">list</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">class</span><span class="o">.</span><span class="n">Annotations</span><span class="p">[</span><span class="n">networkingv1</span><span class="o">.</span><span class="n">AnnotationIsDefaultIngressClass</span><span class="p">]</span> <span class="o">==</span> <span class="s">"true"</span> <span class="p">{</span>
			<span class="n">defaultClasses</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">defaultClasses</span><span class="p">,</span> <span class="n">class</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">defaultClasses</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="no">nil</span>
	<span class="p">}</span>
	<span class="n">sort</span><span class="o">.</span><span class="n">Slice</span><span class="p">(</span><span class="n">defaultClasses</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">CreationTimestamp</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()</span> <span class="o">==</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">CreationTimestamp</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span> <span class="o">&lt;</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">CreationTimestamp</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">CreationTimestamp</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">defaultClasses</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">klog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">4</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"%d default IngressClasses were found, choosing the newest: %s"</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">defaultClasses</span><span class="p">),</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">defaultClasses</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div> <p>通过lister拿到所有的IngressClass，判断是否设置了<code class="language-plaintext highlighter-rouge">ingressclass.kubernetes.io/is-default-class: "true"</code> ，如果有多个就根据创建时间和名称排序，后面添加的默认IngressClass会命中，再往上爬一下</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Admit sets the default value of a Ingress's class if the user did not specify</span>
<span class="c">// a class.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">classDefaulterPlugin</span><span class="p">)</span> <span class="n">Admit</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">attr</span> <span class="n">admission</span><span class="o">.</span><span class="n">Attributes</span><span class="p">,</span> <span class="n">o</span> <span class="n">admission</span><span class="o">.</span><span class="n">ObjectInterfaces</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">attr</span><span class="o">.</span><span class="n">GetResource</span><span class="p">()</span><span class="o">.</span><span class="n">GroupResource</span><span class="p">()</span> <span class="o">!=</span> <span class="n">networkingv1</span><span class="o">.</span><span class="n">Resource</span><span class="p">(</span><span class="s">"ingresses"</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">attr</span><span class="o">.</span><span class="n">GetSubresource</span><span class="p">())</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="n">ingress</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">attr</span><span class="o">.</span><span class="n">GetObject</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">networking</span><span class="o">.</span><span class="n">Ingress</span><span class="p">)</span>
	<span class="c">// if we can't convert then we don't handle this object so just return</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
		<span class="n">klog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"Expected Ingress resource, got: %v"</span><span class="p">,</span> <span class="n">attr</span><span class="o">.</span><span class="n">GetKind</span><span class="p">())</span>
		<span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">NewInternalError</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected Ingress resource, got: %v"</span><span class="p">,</span> <span class="n">attr</span><span class="o">.</span><span class="n">GetKind</span><span class="p">()))</span>
	<span class="p">}</span>

	<span class="c">// IngressClassName field has been set, no need to set a default value.</span>
	<span class="k">if</span> <span class="n">ingress</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">IngressClassName</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="c">// Ingress class annotation has been set, no need to set a default value.</span>
	<span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">ingress</span><span class="o">.</span><span class="n">Annotations</span><span class="p">[</span><span class="n">networkingv1beta1</span><span class="o">.</span><span class="n">AnnotationIngressClass</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="n">klog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">4</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"No class specified on Ingress %s"</span><span class="p">,</span> <span class="n">ingress</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>

	<span class="n">defaultClass</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">getDefaultClass</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">lister</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">admission</span><span class="o">.</span><span class="n">NewForbidden</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// No default class specified, no need to set a default value.</span>
	<span class="k">if</span> <span class="n">defaultClass</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="n">klog</span><span class="o">.</span><span class="n">V</span><span class="p">(</span><span class="m">4</span><span class="p">)</span><span class="o">.</span><span class="n">Infof</span><span class="p">(</span><span class="s">"Defaulting class for Ingress %s to %s"</span><span class="p">,</span> <span class="n">ingress</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">defaultClass</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
	<span class="n">ingress</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">IngressClassName</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">defaultClass</span><span class="o">.</span><span class="n">Name</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div> <p>可以看到，捞到了默认的IngressClass的话，就把Ingress配置里的<code class="language-plaintext highlighter-rouge">Spec.IngressClassName</code>设置为默认的IngressClass名称</p> <p>然后我们到ingress-nginx看看，入口是<code class="language-plaintext highlighter-rouge">cmd/nginx</code> ，main里主要做了以下这些操作：</p> <ol> <li>初始化并和kube-apiserver建立连接</li> <li>做一些版本校验、权限检查</li> <li>初始化自监控（prometheus）采集器</li> <li>初始化nginx控制器controller，重点是这部分</li> <li>启动HTTP服务，自监控和健康检查</li> <li>启动nginx控制器</li> </ol> <p>nginx controller主要做了以下的操作：</p> <ol> <li>初始化并启动同步缓存模块（store）</li> <li>初始化内存队列用来处理配置变更</li> <li>监听本地文件变化，nginx配置和geoip文件</li> <li>确认是否需要选举主</li> <li>拉起nginx（单独进程组）</li> </ol> <p>这里的store会通过多个infomer和lister（k8s.io/client-go）去和kube-apiserver同步信息并在本地做一个缓存，比如感知到对应的ingerss应用的配置更新就可以去刷对应的nginx配置并重新加载</p> <p>在<code class="language-plaintext highlighter-rouge">internal/ingress/controller/store/store.go:429</code> 可以看到</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="n">AddFunc</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">obj</span> <span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
			<span class="n">ing</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">toIngress</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

			<span class="k">if</span> <span class="o">!</span><span class="n">watchedNamespace</span><span class="p">(</span><span class="n">ing</span><span class="o">.</span><span class="n">Namespace</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span>
			<span class="p">}</span>

			<span class="n">ic</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">GetIngressClass</span><span class="p">(</span><span class="n">ing</span><span class="p">,</span> <span class="n">icConfig</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="n">klog</span><span class="o">.</span><span class="n">InfoS</span><span class="p">(</span><span class="s">"Ignoring ingress because of error while validating ingress class"</span><span class="p">,</span> <span class="s">"ingress"</span><span class="p">,</span> <span class="n">klog</span><span class="o">.</span><span class="n">KObj</span><span class="p">(</span><span class="n">ing</span><span class="p">),</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>

			<span class="n">klog</span><span class="o">.</span><span class="n">InfoS</span><span class="p">(</span><span class="s">"Found valid IngressClass"</span><span class="p">,</span> <span class="s">"ingress"</span><span class="p">,</span> <span class="n">klog</span><span class="o">.</span><span class="n">KObj</span><span class="p">(</span><span class="n">ing</span><span class="p">),</span> <span class="s">"ingressclass"</span><span class="p">,</span> <span class="n">ic</span><span class="p">)</span>

			<span class="k">if</span> <span class="n">deepInspector</span> <span class="p">{</span>
				<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">inspector</span><span class="o">.</span><span class="n">DeepInspect</span><span class="p">(</span><span class="n">ing</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
					<span class="n">klog</span><span class="o">.</span><span class="n">ErrorS</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="s">"received invalid ingress"</span><span class="p">,</span> <span class="s">"ingress"</span><span class="p">,</span> <span class="n">klog</span><span class="o">.</span><span class="n">KObj</span><span class="p">(</span><span class="n">ing</span><span class="p">))</span>
					<span class="k">return</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="n">hasCatchAllIngressRule</span><span class="p">(</span><span class="n">ing</span><span class="o">.</span><span class="n">Spec</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">disableCatchAll</span> <span class="p">{</span>
				<span class="n">klog</span><span class="o">.</span><span class="n">InfoS</span><span class="p">(</span><span class="s">"Ignoring add for catch-all ingress because of --disable-catch-all"</span><span class="p">,</span> <span class="s">"ingress"</span><span class="p">,</span> <span class="n">klog</span><span class="o">.</span><span class="n">KObj</span><span class="p">(</span><span class="n">ing</span><span class="p">))</span>
				<span class="k">return</span>
			<span class="p">}</span>

			<span class="n">recorder</span><span class="o">.</span><span class="n">Eventf</span><span class="p">(</span><span class="n">ing</span><span class="p">,</span> <span class="n">corev1</span><span class="o">.</span><span class="n">EventTypeNormal</span><span class="p">,</span> <span class="s">"Sync"</span><span class="p">,</span> <span class="s">"Scheduled for sync"</span><span class="p">)</span>

			<span class="n">store</span><span class="o">.</span><span class="n">syncIngress</span><span class="p">(</span><span class="n">ing</span><span class="p">)</span>
			<span class="n">store</span><span class="o">.</span><span class="n">updateSecretIngressMap</span><span class="p">(</span><span class="n">ing</span><span class="p">)</span>
			<span class="n">store</span><span class="o">.</span><span class="n">syncSecrets</span><span class="p">(</span><span class="n">ing</span><span class="p">)</span>

			<span class="n">updateCh</span><span class="o">.</span><span class="n">In</span><span class="p">()</span> <span class="o">&lt;-</span> <span class="n">Event</span><span class="p">{</span>
				<span class="n">Type</span><span class="o">:</span> <span class="n">CreateEvent</span><span class="p">,</span>
				<span class="n">Obj</span><span class="o">:</span>  <span class="n">obj</span><span class="p">,</span>
			<span class="p">}</span>
		<span class="p">},</span>
</code></pre></div></div> <p>这部分代码是在Ingress资源增加的时候会回调的函数，可以看到</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ic</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">GetIngressClass</span><span class="p">(</span><span class="n">ing</span><span class="p">,</span> <span class="n">icConfig</span><span class="p">)</span>
<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
	<span class="n">klog</span><span class="o">.</span><span class="n">InfoS</span><span class="p">(</span><span class="s">"Ignoring ingress because of error while validating ingress class"</span><span class="p">,</span> <span class="s">"ingress"</span><span class="p">,</span> <span class="n">klog</span><span class="o">.</span><span class="n">KObj</span><span class="p">(</span><span class="n">ing</span><span class="p">),</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="k">return</span>
<span class="p">}</span>
</code></pre></div></div> <p>这里调用了<code class="language-plaintext highlighter-rouge">store.GetIngressClass</code>验证对应的IngressClass和自身是否符合</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">k8sStore</span><span class="p">)</span> <span class="n">GetIngressClass</span><span class="p">(</span><span class="n">ing</span> <span class="o">*</span><span class="n">networkingv1</span><span class="o">.</span><span class="n">Ingress</span><span class="p">,</span> <span class="n">icConfig</span> <span class="o">*</span><span class="n">ingressclass</span><span class="o">.</span><span class="n">Configuration</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// First we try ingressClassName</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">icConfig</span><span class="o">.</span><span class="n">IgnoreIngressClass</span> <span class="o">&amp;&amp;</span> <span class="n">ing</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">IngressClassName</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">iclass</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">listers</span><span class="o">.</span><span class="n">IngressClass</span><span class="o">.</span><span class="n">ByKey</span><span class="p">(</span><span class="o">*</span><span class="n">ing</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">IngressClassName</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">iclass</span><span class="o">.</span><span class="n">Name</span><span class="p">,</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="c">// Then we try annotation</span>
	<span class="k">if</span> <span class="n">class</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">ing</span><span class="o">.</span><span class="n">GetAnnotations</span><span class="p">()[</span><span class="n">ingressclass</span><span class="o">.</span><span class="n">IngressKey</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">class</span> <span class="o">!=</span> <span class="n">icConfig</span><span class="o">.</span><span class="n">AnnotationValue</span> <span class="p">{</span>
			<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"ingress class annotation is not equal to the expected by Ingress Controller"</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">class</span><span class="p">,</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="c">// Then we accept if the WithoutClass is enabled</span>
	<span class="k">if</span> <span class="n">icConfig</span><span class="o">.</span><span class="n">WatchWithoutClass</span> <span class="p">{</span>
		<span class="c">// Reserving "_" as a "wildcard" name</span>
		<span class="k">return</span> <span class="s">"_"</span><span class="p">,</span> <span class="no">nil</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"ingress does not contain a valid IngressClass"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c">// ...</span>
<span class="k">const</span> <span class="p">(</span>
	<span class="c">// IngressKey picks a specific "class" for the Ingress.</span>
	<span class="c">// The controller only processes Ingresses with this annotation either</span>
	<span class="c">// unset, or set to either the configured value or the empty string.</span>
	<span class="n">IngressKey</span> <span class="o">=</span> <span class="s">"kubernetes.io/ingress.class"</span>

	<span class="c">// DefaultControllerName defines the default controller name for Ingress NGINX</span>
	<span class="n">DefaultControllerName</span> <span class="o">=</span> <span class="s">"k8s.io/ingress-nginx"</span>

	<span class="c">// DefaultAnnotationValue defines the default annotation value for the ingress-nginx controller</span>
	<span class="n">DefaultAnnotationValue</span> <span class="o">=</span> <span class="s">"nginx"</span>
<span class="p">)</span>
</code></pre></div></div> <p>这边可以看到，根据这样的顺序获取IngressClass Name：</p> <ol> <li>先从spec.ingressClassName获取</li> <li>再从annotations的kubernetes.io/ingress.class获取</li> </ol> <p>所在在都没有指定的情况下，就匹配不到，就不会处理这个Ingress资源对象了，这里IngressClassName是1.18引入的，应该优先使用这个，然后annotations是为了兼容旧的，所以理论上如果k8s是1.18之后的版本，还是应该采用IngressClassName。</p> <p>结合前面kube-apiserver的代码，以及traefik是默认的IngressClass，我们可以知道其实这边spec.ingressClassName会被填充为traefik，我们看下ingres-nginx容器的日志</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">I1204</span> <span class="m">09</span><span class="o">:</span><span class="m">51</span><span class="o">:</span><span class="m">54.338921</span>       <span class="m">7</span> <span class="n">store</span><span class="o">.</span><span class="k">go</span><span class="o">:</span><span class="m">436</span><span class="p">]</span> <span class="s">"Ignoring ingress because of error while validating ingress class"</span> <span class="n">ingress</span><span class="o">=</span><span class="s">"default/nginx-ingress"</span> <span class="kt">error</span><span class="o">=</span><span class="s">"no object matching key </span><span class="se">\"</span><span class="s">traefik</span><span class="se">\"</span><span class="s"> in local store"</span>
</code></pre></div></div> <p>可以看到，匹配到traefik，符合预期。</p> <p>当我们没有traefik的情况下，又没有配置默认的IngressClass，在Ingress提交的时候又没有指定spec.ingressClassName和annotations的情况下，也是无法命中</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-12-19-default-ingress-class/no-default-ingress-class-480.webp 480w,/assets/img/2024-12-19-default-ingress-class/no-default-ingress-class-800.webp 800w,/assets/img/2024-12-19-default-ingress-class/no-default-ingress-class-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-12-19-default-ingress-class/no-default-ingress-class.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 无默认IngressClass </div> <p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource">官方文档</a>也有说明这个，k8s本身是不会指定默认的IngressClass，也可以理解，k8s本身并没有内置IngressClass。</p> <p>ingress-nginx可以这样配置成默认的IngressClass</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">IngressClass</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app.kubernetes.io/component</span><span class="pi">:</span> <span class="s">controller</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-example</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">ingressclass.kubernetes.io/is-default-class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">controller</span><span class="pi">:</span> <span class="s">k8s.io/ingress-nginx</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Kubernetes"/><category term="Kubernetes"/><summary type="html"><![CDATA[最近遇到一个问题，就是Ingress配置错误问题导致了到Ingress的流量始终无法流到对应的Service]]></summary></entry><entry><title type="html">15s→1s慢查询优化小记</title><link href="https://ifuryst.github.io/blog/2024/optimizing-slow-queries-from-15s-to-1s/" rel="alternate" type="text/html" title="15s→1s慢查询优化小记"/><published>2024-11-22T13:41:27+00:00</published><updated>2024-11-22T13:41:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/optimizing-slow-queries-from-15s-to-1s</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/optimizing-slow-queries-from-15s-to-1s/"><![CDATA[<p>SQL慢查询是老生常谈的问题了，似乎好像不会做点优化都不行。慢查询优化其实有很多手段，并且也根据应用场景和需求而异，我觉得比较重要的还是了解底层原理，这样上层应用层怎么变化都能比较快的找到优化的点。借着这个机会小谈一下SQL优化中的一些过程和想法。</p> <p>另外有点标题党了，我觉得能有较大收益的情况很有可能是因为底子太差了，就像这次帮人看的这个项目，才能简单的做出这么大的优化。不过世界是个草台班子，到哪都可能遇到因肝需求而留下的技术债，这种地方如果没有做好顶层设计和代码质量把控的话，极其容易出现这个问题，堆需求，然后出问题再来反向优化解决的情况。</p> <h2 id="准备阶段">准备阶段</h2> <p>开始处理慢查询问题前，有几个东西需要提前准备好：</p> <ol> <li>具体产生位置</li> <li>数据组装</li> <li>定基准点</li> </ol> <h3 id="具体产生位置">具体产生位置</h3> <p>这里主要是定位问题产生点，很多时候我们有慢查询的统计SQL，就能进一步根据语句到代码反差，这部分通常比较容易的就可以做好定位。</p> <p>通常我们会基于产生位置反向摸排，确定调用方，这样可以进一步确定影响范围，减少后续改动对外部的影响</p> <h3 id="数据组装">数据组装</h3> <p>需要进行各类数据或者参数的组装，用于复现实际问题。</p> <p>通常情况下，我们希望最大化负载，也就是以业务范围内较糟糕的情况来组装数据进行复现，能有压测条件是更好的。这样我们可以最大化各个关键环节和节点的消耗情况，可以进一步研判优化位置</p> <h3 id="定基准点">定基准点</h3> <p>我们通常会以前面确定的较坏的情况做基准，后续以此为基准去做优化，这样能给我们优化提供方向和结果的量化。另外有些情况下我们还会有明确的目标阈值指导我们持续优化到目标</p> <h2 id="优化过程">优化过程</h2> <p>对于慢查询的优化有非常多的方法，这里我们主要沿着此次遇到的问题提取关键优化点做一定的分析和发散。</p> <p>因为问题比较明确，这边我们在组装完所需的配套数据和参数之后，就直接到关键的SQL部分去做分阶段的打印，因为涉及的SQL操作比较多，所以我们希望能明确各阶段的消耗。这边我在代码里一些关键点埋了一下打印。跑测后，我们得到分阶段的消耗统计</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Stage 1: <span class="o">===&gt;</span> 428ms
Stage 2: <span class="o">===&gt;</span> 138ms
Stage 3: <span class="o">===&gt;</span> 7ms
Stage 4: <span class="o">===&gt;</span> 617ms
Stage 5: <span class="o">===&gt;</span> 13898ms
</code></pre></div></div> <p>此时我们可以明确问题出现阶段5，消耗了13s的查询时间，我们先着重处理这个位置</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_code.2024-11-22_15-51-28-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_code.2024-11-22_15-51-28-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_code.2024-11-22_15-51-28-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_code.2024-11-22_15-51-28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 原始代码 </div> <p>首先观察到有3个数据库查询的调用，后两个还好点，通过IN的方式走，第一个是大量LIKE的方式，我们优先解决这个，这里就产生了第一个优化点：LIKE的使用</p> <h3 id="like的使用">LIKE的使用</h3> <p>通常情况下我们会尽量不使用或者减少使用LIKE子句，MySQL中LIKE只有在前缀匹配的时候才会走索引，也就是</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 精准匹配或者字符串开头的，可以走索引</span>
SELECT <span class="k">*</span> FROM table WHERE column LIKE <span class="s1">'abc%'</span><span class="p">;</span>
SELECT <span class="k">*</span> FROM table WHERE column LIKE <span class="s1">'abc'</span><span class="p">;</span>
<span class="c"># 通配符开头的，不走索引</span>
SELECT <span class="k">*</span> FROM table WHERE column LIKE <span class="s1">'%abc'</span><span class="p">;</span>
SELECT <span class="k">*</span> FROM table WHERE column LIKE <span class="s1">'%abc%'</span><span class="p">;</span>
</code></pre></div></div> <p>对于大数据集来说，这种模糊匹配性能很低，尽可能应该避免，或者采用ES之类的专用全文搜索引擎。</p> <p>通过对外部所有调用方的入参情况确认，我们可以分析出这里并不需要使用LIKE，因为传入的orgIdList其实已经包含了父子orgId的完整合集了，因此我们直接去掉LIKE部分的检索</p> <p>我们跑测一下，可以看到，已经从13s将为3s了</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Stage 1: <span class="o">===&gt;</span> 279ms
Stage 2: <span class="o">===&gt;</span> 160ms
Stage 3: <span class="o">===&gt;</span> 2ms
Stage 4: <span class="o">===&gt;</span> 601ms
Stage 5: <span class="o">===&gt;</span> 3202ms
</code></pre></div></div> <p>此时我们进一步来看看剩下的两个查询操作，可以看到取出来的数据只是期望得到其中某一列的数据，这种情况我们就来到了第二个优化点：只查询必要的列</p> <h3 id="只查询必要的列">只查询必要的列</h3> <p>尤其对于一些数据量大，或者列多的大宽表来说，如果能显式指定列的话，可以提升查询和数据返回过程中的消耗，这边我们收敛一下，并且把代码结构简单调整一下使得代码更加直观</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/specify_cols.2024-11-22_15-57-36-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/specify_cols.2024-11-22_15-57-36-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/specify_cols.2024-11-22_15-57-36-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/specify_cols.2024-11-22_15-57-36.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 指定列查询 </div> <p>这边我们显式指定了<code class="language-plaintext highlighter-rouge">.select(XXXRel::getOrgPersonId)</code> 和<code class="language-plaintext highlighter-rouge">.select(XXXUser::getAccountId)</code> ，这样SELECT语句只会查询该列</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Stage 1: <span class="o">===&gt;</span> 260ms
Stage 2: <span class="o">===&gt;</span> 140ms
Stage 3: <span class="o">===&gt;</span> 2ms
Stage 4: <span class="o">===&gt;</span> 614ms
Stage 5: <span class="o">===&gt;</span> 1635ms
</code></pre></div></div> <p>跑测后可以看到，这个环节已经被优化到1.6s了</p> <p>此时从代码层面我们已经看不出太多的优化点了，但是此时我们还是可以深挖一下具体的SQL，因为以我们的经验来说，两个SELECT … IN查询不至于需要1.6s，况且数据集也没有达到大几百万或者千万级别，所以我们有理由猜测可能在SQL层面还存在什么问题，我们进一步挖一下</p> <h3 id="sql分析">SQL分析</h3> <p>这边我们拉出两条语句</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">org_person_id</span> <span class="k">FROM</span> <span class="n">db_a</span><span class="p">.</span><span class="n">xxx_rel</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span> <span class="k">AND</span> <span class="n">org_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="p">...,</span> <span class="mi">11</span><span class="p">))</span>

<span class="k">SELECT</span> <span class="n">account_id</span> <span class="k">FROM</span> <span class="n">db_b</span><span class="p">.</span><span class="n">xxx_user</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span> <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'abc123'</span> <span class="k">AND</span> <span class="n">org_user_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="p">...,</span> <span class="mi">9</span><span class="p">))</span>
</code></pre></div></div> <p>这里内容过长，我裁剪了大部分的ID，主要结构就是这样，IN了大量的ID，我们用<code class="language-plaintext highlighter-rouge">EXPLAIN</code>来分析一下语句的执行计划（Execution Plan），虽然不是实际的执行，但是通过预测执行计划的分析，可以帮助我们理解查询性能并发现优化点</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="n">org_person_id</span> <span class="k">FROM</span> <span class="n">db_a</span><span class="p">.</span><span class="n">xxx_rel</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span> <span class="k">AND</span> <span class="n">org_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="p">...,</span> <span class="mi">11</span><span class="p">))</span>

<span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="n">account_id</span> <span class="k">FROM</span> <span class="n">db_b</span><span class="p">.</span><span class="n">xxx_user</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span> <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'abc123'</span> <span class="k">AND</span> <span class="n">org_user_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="p">...,</span> <span class="mi">9</span><span class="p">))</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_ref_query.2024-11-19_20-03-55-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_ref_query.2024-11-19_20-03-55-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_ref_query.2024-11-19_20-03-55-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_ref_query.2024-11-19_20-03-55.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_all_query.2024-11-19_20-04-14-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_all_query.2024-11-19_20-04-14-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_all_query.2024-11-19_20-04-14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/origin_all_query.2024-11-19_20-04-14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 原始查询走索引情况 </div> <p>对应的列可以参考官方的<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">文档释义</a>：</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/explain_output_cols.2024-11-19_20-03-06-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/explain_output_cols.2024-11-19_20-03-06-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/explain_output_cols.2024-11-19_20-03-06-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/explain_output_cols.2024-11-19_20-03-06.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> EXPLAIN列含义 </div> <p>这边我们关注一下type这列，这边列出主要的类型，完整的可以参考<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-join-types">官方文档</a>：</p> <ul> <li>ALL（全表扫描）：对所有行扫描，效率最低下</li> <li>index（索引扫描），走索引并且不回表</li> <li>range（索引范围扫描），走索引扫描一部分数据（范围数据）</li> <li>ref（索引引用），走非唯一索引（或唯一索引的前缀部分），通常需要回表</li> </ul> <p>这里我们可以看到第一个语句type走了ref，也就是索引引用，这边我们就先不管了（理论上这里可以用联合索引增加索引级别，不过我们可以先不考虑做这个优化）</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/ref_index.2024-11-19_20-02-52-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/ref_index.2024-11-19_20-02-52-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/ref_index.2024-11-19_20-02-52-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/ref_index.2024-11-19_20-02-52.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 索引情况 </div> <p>第二句就很奇怪，直接走ALL全表了，我们看一下索引，发现status_cd，tenant_id和org_user_id都没有任何索引</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/all_index.2024-11-22_16-04-24-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/all_index.2024-11-22_16-04-24-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/all_index.2024-11-22_16-04-24-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/all_index.2024-11-22_16-04-24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 索引情况 </div> <p>这边我们直接做一个联合索引</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">db_b</span><span class="p">.</span><span class="n">xxx_user</span>
<span class="k">ADD</span> <span class="k">INDEX</span> <span class="n">idx_status_tenant_orguser</span> <span class="p">(</span><span class="n">tenant_id</span><span class="p">,</span> <span class="n">status_cd</span><span class="p">,</span> <span class="n">org_user_id</span><span class="p">);</span>
</code></pre></div></div> <p>跑测一下看看，出乎意料的，竟然没有多少提升</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stage</span> <span class="mi">1</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">261</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">2</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">135</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">3</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">3</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">4</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">604</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">5</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">1599</span><span class="n">ms</span>
</code></pre></div></div> <p>我们也明确的看到了语句是走索引的</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/add_index.2024-11-19_20-23-08-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/add_index.2024-11-19_20-23-08-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/add_index.2024-11-19_20-23-08-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/add_index.2024-11-19_20-23-08.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 增加索引 </div> <p>经过分析，是因为该表本身的量级不大，所以走ALL和索引的情况下，查询时间差不多。另外进一部分分析了两条SQL的执行时间，基本都是在ms级别的（分别0.12629075和0.0343075），大体是几十ms到100ms+这样的水平，实际上这边的时间分别消耗在：</p> <ol> <li>MySQL查询引擎本身，单条单次100ms来计算，按照总300ms</li> <li>网络耗时，来回的Roundtrip大概需要200ms（具体因链路情况而定），这边2次按照400ms算</li> <li>其他的都是消耗在系统层和应用层做数据拆解包、复制和解析这部分的消耗</li> </ol> <p>这边我们根据实际观测可以得出的结论是大部分时间都消耗在2、3阶段了，因此我们要继续做一个优化动作：合并数据库查询操作</p> <h3 id="合并数据库查询操作">合并数据库查询操作</h3> <p>这边我们可以看到实际上前一次查询的结果实际上是为了给后一次使用，且没有任何其他用途了，因此我们应该减少这次的网络传输和相应的应用层处理的时间，直接交给数据库引擎处理，这个在大数据集的情况下尤其有效，并且也是DB的一个能力之一。</p> <p>这边我们增加一个嵌套查询，大体为：</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="k">distinct</span> <span class="n">u</span><span class="p">.</span><span class="n">account_id</span>
<span class="k">FROM</span>
    <span class="n">db_b</span><span class="p">.</span><span class="n">xxx_user</span> <span class="n">u</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">db_a</span><span class="p">.</span><span class="n">tf_org_person_rel</span> <span class="n">r</span>
<span class="k">ON</span>
    <span class="n">u</span><span class="p">.</span><span class="n">org_user_id</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">org_person_id</span>
<span class="k">WHERE</span>
    <span class="n">r</span><span class="p">.</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span>
    <span class="k">AND</span> <span class="n">r</span><span class="p">.</span><span class="n">org_id</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">429763</span><span class="p">,</span> <span class="mi">429764</span><span class="p">,</span> <span class="mi">2361116</span><span class="p">,</span> <span class="p">...,</span> <span class="mi">2558342</span><span class="p">)</span>
    <span class="k">AND</span> <span class="n">u</span><span class="p">.</span><span class="n">status_cd</span> <span class="o">=</span> <span class="s1">'1'</span>
    <span class="k">AND</span> <span class="n">u</span><span class="p">.</span><span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'abc123'</span>
</code></pre></div></div> <p>然后我们增加3个子阶段的时间度量（其中1和2为之前剩余的2次查询，3为1和2合并的查询），跑测一下</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stage</span> <span class="mi">1</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">255</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">2</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">137</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">3</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">1</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">4</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">483</span><span class="n">ms</span>
<span class="n">Sub</span><span class="o">-</span><span class="n">Stage</span> <span class="mi">5</span><span class="p">.</span><span class="mi">1</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">740</span><span class="n">ms</span>
<span class="n">Sub</span><span class="o">-</span><span class="n">Stage</span> <span class="mi">5</span><span class="p">.</span><span class="mi">2</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">673</span><span class="n">ms</span>
<span class="n">Sub</span><span class="o">-</span><span class="n">Stage</span> <span class="mi">5</span><span class="p">.</span><span class="mi">3</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">433</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">5</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">1847</span><span class="n">ms</span>
</code></pre></div></div> <p>可以看到，1.3s可以直接所见到400ms，因为少了数据量的来回传输，传输的数据也相应的减少了，甚至单次的时间消耗都比分开的两次都低。</p> <p>整理一下代码：</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/final_code.2024-11-22_16-25-17-480.webp 480w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/final_code.2024-11-22_16-25-17-800.webp 800w,/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/final_code.2024-11-22_16-25-17-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-22-optimizing-slow-queries-from-15s-to-1s/final_code.2024-11-22_16-25-17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> 最终优化代码 </div> <p>本身很复杂的逻辑此时已经完全简化了，实现了数据库操作复杂语句和应用层逻辑的剥离了，这也是分层的一个比较实用的逻辑和应用</p> <p>跑测一下</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stage</span> <span class="mi">1</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">213</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">2</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">118</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">3</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">3</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">4</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">486</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">5</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">496</span><span class="n">ms</span>
</code></pre></div></div> <p>可以看到，已经在ms级别了，这边看着是已经达到预期的目标了。另外还有一些优化手段，比如数据集真的大到一定量级，IN太多的情况下，可以考虑分页拉取，不过正如前面说的，除了数据库引擎层消耗以外，还有网络和应用层也会消耗，所以是需要取舍的。</p> <p>这里我们砍掉了最大头之后，可以回头对前面的阶段也优化一下，主要是针对拉全列改成拉需要的列，跑测一下看看</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stage</span> <span class="mi">1</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">218</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">2</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">113</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">3</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">0</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">4</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">226</span><span class="n">ms</span>
<span class="n">Stage</span> <span class="mi">5</span><span class="p">:</span> <span class="o">===&gt;</span> <span class="mi">511</span><span class="n">ms</span>
</code></pre></div></div> <p>到这里的这波优化已经取得不错的成果了，这边其实还有办法进一步继续优化的，但是这个接口牵涉太多的历史业务逻辑，因此这边暂时没有继续深挖，这个其实也是很多还债过程中最难受的点，你需要保持兼容，如果前辈们没良心的堆，那大概这个草台很容易在优化重构过程中会崩塌，祝好</p> <h2 id="结论">结论</h2> <p>因为脱敏的需求，有些截图就不放了，虽然我觉得那些有助于理解整个优化过程中的思路和一步一步的优化带来的代码变迁。说到这里有时候我们在团队协作中会有结对Code Review或者定期抽样代码评审的方式，其实也是保证一个人的思路能传递给其他人，另外也能让好的思想在团队内部传播，能让新同学更快速跟上，并且长期保持团队代码质量、工程能力和协作能力。</p> <p>另外咱们还是应该坚持对事不对人，因为每个人都有一段成长期，并且很多人在面临高压或者高速增长的业务的情况下，有很大的可能出现技术债（<del>不然某节和某团的区别从何而来</del>），并且不管是谁写的东西都是有”保质期“的。</p>]]></content><author><name></name></author><category term="DB"/><category term="SQL-OPTIMIZATION"/><summary type="html"><![CDATA[SQL慢查询是老生常谈的问题了，似乎好像不会做点优化都不行。慢查询优化其实有很多手段，并且也根据应用场景和需求而异，我觉得比较重要的还是了解底层原理，这样上层应用层怎么变化都能比较快的找到优化的点。借着这个机会小谈一下SQL优化中的一些过程和想法。]]></summary></entry><entry><title type="html">Git多项目配置管理</title><link href="https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories/" rel="alternate" type="text/html" title="Git多项目配置管理"/><published>2024-11-11T15:08:27+00:00</published><updated>2024-11-11T15:08:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories/"><![CDATA[<p>平时会处理很多项目，这期间就会遇到Git相关的配置管理问题，以前都是手动管理，会遇到遗漏的情况，现在处理的项目太多了，开源社区也会参与一些项目的贡献，再手动管理很麻烦，看了一下Git是支持根据路劲来走配置的</p> <h2 id="git配置来源">Git配置来源</h2> <p>总体而言，Git读取配置主要有这么几个来源（优先级从低到高）：</p> <ol> <li>系统级（system）配置：<code class="language-plaintext highlighter-rouge">/etc/gitconfig</code></li> <li>用户级（global）配置：<code class="language-plaintext highlighter-rouge">~/.gitconfig</code></li> <li>仓库级（local）配置：项目下的<code class="language-plaintext highlighter-rouge">.git/config</code></li> </ol> <h2 id="配置命令">配置命令</h2> <p>通常情况下我们会比较多使用2和3，也就是用户级别的全局配置和单仓库级别的配置，也就是对应了以下的命令</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 全局配置</span>
git config <span class="nt">--global</span> <span class="nt">--list</span>
<span class="c"># 配置用户名</span>
git config <span class="nt">--global</span> user.name <span class="s1">'fake-name'</span>
<span class="c"># 配置邮箱</span>
git config <span class="nt">--global</span> user.email <span class="s1">'fake@email.com'</span>
<span class="c"># 配置GPG密钥ID</span>
git config <span class="nt">--global</span> user.signingkey ABC123PGPKEYID

<span class="c"># 仓库级配置</span>
git config <span class="nt">--list</span>
<span class="c"># 配置用户名</span>
git config user.name <span class="s1">'fake-name'</span>
<span class="c"># 配置邮箱</span>
git config user.email <span class="s1">'fake@email.com'</span>
<span class="c"># 配置GPG密钥ID</span>
git config user.signingkey ABC123PGPKEYID
</code></pre></div></div> <h2 id="统一配置">统一配置</h2> <p>上面的命令我们可以临时应对某些仓库临时或者单独设置，但是对于全局来说，我们不希望每次我们拉取或者起新的仓库的时候要重复配置，这会很烦人，并且重点是很多时候会忘记，因此一劳永逸的方法是根据分级配置，在全局做好配置，我个人的习惯是会根据目录来划分不同的组织项目，互不干扰</p> <p>比如此时我们有两组不同的目录里会包含各种项目：</p> <ol> <li><code class="language-plaintext highlighter-rouge">/path/to/github/</code> 包含了在开源社区的一些项目</li> <li><code class="language-plaintext highlighter-rouge">/path/to/fake-org/</code> 包含了在某个组织的项目</li> </ol> <p>此时在<code class="language-plaintext highlighter-rouge">~/.gitconfig</code>里可以这样配置</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:/path/to/github/"</span><span class="o">]</span>
    path <span class="o">=</span> /path/to/.gitconfig.github

<span class="o">[</span>includeIf <span class="s2">"gitdir:/path/to/fake-org/"</span><span class="o">]</span>
    path <span class="o">=</span> /path/to/.gitconfig.fake-org
</code></pre></div></div> <p>这样我们就可以针对这两个目录下的项目分别走两份不同的git配置</p> <p>比如<code class="language-plaintext highlighter-rouge">.gitconfig.github</code>的配置</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"leo"</span>
    email <span class="o">=</span> <span class="s2">"my@email.com"</span>
    signingkey <span class="o">=</span> <span class="s2">"ABC123"</span>
</code></pre></div></div> <p>而<code class="language-plaintext highlighter-rouge">.gitconfig.fake-org</code>的配置</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"fake-name"</span>
    email <span class="o">=</span> <span class="s2">"fake@email.com"</span>
    signingkey <span class="o">=</span> <span class="s2">"ABC456"</span>
</code></pre></div></div> <p>这样就可以一劳永逸的解决多项目不同Git配置问题</p> <h2 id="参考">参考</h2> <ul> <li><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt---global">https://git-scm.com/docs/git-config#Documentation/git-config.txt—global</a></li> </ul>]]></content><author><name></name></author><category term="DevOps"/><category term="Git"/><summary type="html"><![CDATA[平时会处理很多项目，这期间就会遇到Git相关的配置管理问题，以前都是手动管理，会遇到遗漏的情况，现在处理的项目太多了，开源社区也会参与一些项目的贡献，再手动管理很麻烦，看了一下Git是支持根据路劲来走配置的]]></summary></entry><entry><title type="html">GOMAXPROCS：Go的CPU核心数限制与容器化环境中的性能优化</title><link href="https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers/" rel="alternate" type="text/html" title="GOMAXPROCS：Go的CPU核心数限制与容器化环境中的性能优化"/><published>2024-11-06T13:08:27+00:00</published><updated>2024-11-06T13:08:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers/"><![CDATA[<p>最近遇到一个有趣的问题，关于在Cgroups限制CPU资源的情况之下，设置可用核心数的时候会导致一些性能差异，因此就这个问题探究了一下</p> <h2 id="gomaxprocs是什么">GOMAXPROCS是什么</h2> <p>GOMAXPROCS是runtime里的一个方法，看下官方的介绍</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// GOMAXPROCS sets the maximum number of CPUs that can be executing</span>
<span class="c">// simultaneously and returns the previous setting. It defaults to</span>
<span class="c">// the value of [runtime.NumCPU]. If n &lt; 1, it does not change the current setting.</span>
<span class="c">// This call will go away when the scheduler improves.</span>
<span class="k">func</span> <span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{}</span>
</code></pre></div></div> <p>简单的说，就是用于设置Go程序能用的CPU核心数，默认的话情况是使用所有核心（也就是runtime.NumCPU获取到的值）</p> <h2 id="gomaxprocs有什么用">GOMAXPROCS有什么用</h2> <p>在实际使用中，runtime.GOMAXPROCS多用来控制整个程序的并发量（或者说资源消耗），当设置大了，程序自然就能跑更多的协程，反之会限制同一时间的协程数量。</p> <p>通过这个我们可以在一些场景下控制资源消耗，比如有一些资源比较敏感的设备，或者小实例的场景，尤其针对以Kubernetes为主的容器化场景，通常我们会控单实例的资源，然后配合多实例实现算力切割或者容灾等目的。</p> <h2 id="具体问题">具体问题</h2> <p>通常情况下，可能不会遇到太大问题（或者不会注意到这个问题），但是在一些场景诸如高并发，关注时延（P50，P99等）、吞吐的场景，就很有可能会被影响到。</p> <p>具体的问题是，当通过Cgroups限制CPU的话，可能就会有这个问题，尤其是现在很多服务是通过Kubernetes、Docker拉起的，在容器环境里，外部可能会限制CPU、内存的最大值，这种情况在资源跑满的情况下有可能会导致实际效率比做了合适的限制来得更低的情况</p> <p>一步一步来看，可能会更加容易理解，我们拉一个容器</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="o">--</span><span class="n">rm</span> <span class="o">--</span><span class="n">cpus</span><span class="o">=</span><span class="s">"2"</span> <span class="o">-</span><span class="n">m</span> <span class="m">512</span><span class="n">m</span> <span class="n">golang</span><span class="o">:</span><span class="m">1.23</span><span class="o">-</span><span class="n">bullseye</span> <span class="n">bash</span>
</code></pre></div></div> <p>可以看到，这边我们限制了2核，512M的使用率限制，进到容器看看</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> CPU and Memory in Container </div> <p>可以看到，CPU和内存还是读取到了宿主机的实际大小，同时我们看看Cgroups</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Cgroups in Container </div> <p>可以看到Cgroups确实是有设置的，这边200000/100000=2核</p> <p>我们跑个Go程序看看</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> GOMAXPROCS Demo </div> <p>可以看到，这边实际上获取到的也是12核，这种情况下，如果用默认的runtime.GOMAXPROCS(0)就会将最大的核心数设置成12，但是因为我们通过Cgroups限制的是2个核心，所以在2核跑满的情况之下就会出现前面提到的问题，表现为：</p> <p><strong>如果我们设置最大可用为12的情况下获得的性能是不如我们设置为2</strong></p> <h2 id="解决方案">解决方案</h2> <p>先说结论，方便下面的全流程展示。</p> <p>最直接的解决方案就是和对应的外部限制统一，可以直接通过配置传递来做，不够会比较刻板，某些情况不适应或者不灵活。</p> <p>如果是Cgroups这种情况需要动态读取的话，就需要去读取Cgroups的配置，Cgroups v1和v2有有些出入，所幸的是有对应的方案，Uber的<a href="https://github.com/uber-go/automaxprocs">automaxprocs</a>，里面针对Cgroups v1和v2做了适配读取，只支持Linux。（关于Cgroups后续有机会再展开聊聊，这边不展开了）</p> <p>值得一提的是Uber开源这个简单的工具也是因为他们在生产环境上遇到了P50、P99被这个问题影响</p> <h2 id="全流程">全流程</h2> <p>接下里我们一起通过代码来观测整个现象。</p> <p>我弄了一个Demo来演示这个结果，具体代码参见：<a href="https://github.com/iFurySt/GoMaxProcsBench">GoMaxProcsBench</a></p> <p>我们看下cmd/bench/main.go，完整代码如下</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"flag"</span>
	<span class="s">"fmt"</span>
	<span class="s">"go.uber.org/automaxprocs/maxprocs"</span>
	<span class="s">"log"</span>
	<span class="s">"os"</span>
	<span class="s">"os/signal"</span>
	<span class="s">"runtime"</span>
	<span class="s">"sync/atomic"</span>
	<span class="s">"syscall"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">n</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>   <span class="kt">int</span>
	<span class="n">ts</span>     <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">silent</span> <span class="kt">bool</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">silent</span><span class="p">,</span> <span class="s">"silent"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"silent mode"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Printf</span><span class="p">(</span><span class="s">"mode: %d, ts: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">ts</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">runtime</span><span class="o">.</span><span class="n">NumCPU</span><span class="p">())</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"GOMAXPROCS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">maxprocs</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">maxprocs</span><span class="o">.</span><span class="n">Logger</span><span class="p">(</span><span class="n">Printf</span><span class="p">))</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="p">(</span>
		<span class="n">st</span>     <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
		<span class="n">count</span>  <span class="n">atomic</span><span class="o">.</span><span class="n">Int64</span>
		<span class="n">sigs</span>   <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
		<span class="n">ctx</span>    <span class="n">context</span><span class="o">.</span><span class="n">Context</span>
		<span class="n">cancel</span> <span class="n">context</span><span class="o">.</span><span class="n">CancelFunc</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">ctx</span><span class="p">,</span> <span class="n">cancel</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithTimeout</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">ts</span><span class="p">)</span>
		<span class="k">defer</span> <span class="n">cancel</span><span class="p">()</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">sigs</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGKILL</span><span class="p">)</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"count: %d, time: %v, qps: %.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">(),</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">),</span>
			<span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">sigs</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">default</span><span class="o">:</span>
			<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
				<span class="n">_</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
				<span class="n">count</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
			<span class="p">}()</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">Printf</span><span class="p">(</span><span class="n">format</span> <span class="kt">string</span><span class="p">,</span> <span class="n">v</span> <span class="o">...</span><span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">v</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>整体逻辑很简单，我们从上到下看下</p> <p>我们用一个fibonacci来模拟耗时的计算任务</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">n</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>我们定义几个参数</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>   <span class="kt">int</span>
	<span class="n">ts</span>     <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">silent</span> <span class="kt">bool</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">silent</span><span class="p">,</span> <span class="s">"silent"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"silent mode"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>分别是mode来指定走runtime.GOMAXPROCS还是automaxprocs/maxprocs</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">Printf</span><span class="p">(</span><span class="s">"mode: %d, ts: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">ts</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">runtime</span><span class="o">.</span><span class="n">NumCPU</span><span class="p">())</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"GOMAXPROCS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">maxprocs</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">maxprocs</span><span class="o">.</span><span class="n">Logger</span><span class="p">(</span><span class="n">Printf</span><span class="p">))</span>
	<span class="p">}</span>
</code></pre></div></div> <p>如果有指定ts就是运行时长，我们就通过context来控制程序到达时间退出</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">var</span> <span class="p">(</span>
		<span class="n">st</span>     <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
		<span class="n">count</span>  <span class="n">atomic</span><span class="o">.</span><span class="n">Int64</span>
		<span class="n">sigs</span>   <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
		<span class="n">ctx</span>    <span class="n">context</span><span class="o">.</span><span class="n">Context</span>
		<span class="n">cancel</span> <span class="n">context</span><span class="o">.</span><span class="n">CancelFunc</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">ctx</span><span class="p">,</span> <span class="n">cancel</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithTimeout</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">ts</span><span class="p">)</span>
		<span class="k">defer</span> <span class="n">cancel</span><span class="p">()</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
	<span class="p">}</span>
</code></pre></div></div> <p>监听一下信号量，在没有指定时间的时候可以Ctrl+C来停止跑测的程序</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">sigs</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGKILL</span><span class="p">)</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"count: %d, time: %v, qps: %.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">(),</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">),</span>
			<span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">sigs</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">default</span><span class="o">:</span>
			<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
				<span class="n">_</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
				<span class="n">count</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
			<span class="p">}()</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div> <p>通过for分别在context、信号量和程序之间循环，执行都是直接开个新的协程跑</p> <p>我们跑一下看看。这边可以直接通过repo里的docker-compose.yml去拉起容器测试，已经配置好了</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
docker compose <span class="nb">exec </span>golang bash
</code></pre></div></div> <p>我们分别跑测一下两种模式，分别跑5s</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Bench for GOMAXPROCS and AUTOMAXPROCS </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/bench/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0
2024/11/06 09:32:45 mode: 0, ts: 5s
2024/11/06 09:32:45 maxprocs: Updating <span class="nv">GOMAXPROCS</span><span class="o">=</span>2: determined from CPU quota
2024/11/06 09:32:50 count: 15323801, <span class="nb">time</span>: 5.000015461s, qps: 3064751
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/bench/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1
2024/11/06 09:32:51 mode: 1, ts: 5s
2024/11/06 09:32:51 GOMAXPROCS: 12
2024/11/06 09:32:56 count: 8984694, <span class="nb">time</span>: 5.001722252s, qps: 1796320
</code></pre></div></div> <p>可以看到和最早分析的一样，一个用了2核一个用了12核跑，程序会打印fib运行的次数和总耗时，然后打印QPS，这边单次无法代表整体情况，我加了一个工具，我们可以通过cmd/stats/main.go来跑多次算结果，代码如下：</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"flag"</span>
	<span class="s">"fmt"</span>
	<span class="s">"log"</span>
	<span class="s">"os/exec"</span>
	<span class="s">"strconv"</span>
	<span class="s">"strings"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>  <span class="kt">int</span>
	<span class="n">ts</span>    <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">times</span> <span class="kt">int</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">times</span><span class="p">,</span> <span class="s">"times"</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="s">"times to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">total</span> <span class="kt">int64</span> <span class="o">=</span> <span class="m">0</span>
	<span class="n">cnt</span> <span class="o">:=</span> <span class="m">0</span>
	<span class="k">for</span> <span class="k">range</span> <span class="n">times</span> <span class="p">{</span>
		<span class="n">cmd</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"run"</span><span class="p">,</span> <span class="s">"cmd/bench/main.go"</span><span class="p">,</span>
			<span class="s">"--silent"</span><span class="p">,</span> <span class="s">"-mode"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprint</span><span class="p">(</span><span class="n">mode</span><span class="p">),</span> <span class="s">"-ts"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprint</span><span class="p">(</span><span class="n">ts</span><span class="o">.</span><span class="n">String</span><span class="p">()))</span>

		<span class="n">output</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">cmd</span><span class="o">.</span><span class="n">CombinedOutput</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to execute command: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="n">qps</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">TrimSpace</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">output</span><span class="p">)),</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to parse output: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="n">total</span> <span class="o">+=</span> <span class="n">qps</span>
		<span class="n">cnt</span><span class="o">++</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">cnt</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Average QPS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">total</span><span class="o">/</span><span class="kt">int64</span><span class="p">(</span><span class="n">cnt</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"No valid result</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>我们分别跑个10次看看</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Stats for GOMAXPROCS and AUTOMAXPROCS </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0 <span class="nt">--times</span> 10
2024/11/06 09:36:29 Average QPS: 3010903
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1 <span class="nt">--times</span> 10
2024/11/06 09:37:33 Average QPS: 2408036
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0 <span class="nt">--times</span> 10
2024/11/06 09:38:41 Average QPS: 2896338
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1 <span class="nt">--times</span> 10
2024/11/06 09:40:25 Average QPS: 2364868
</code></pre></div></div> <p>可以看到QPS的差异了，这个case下粗略估计有20%的损耗</p> <p>这个时候如果看容器的CPU使用率可以发现，限制在2核的使用率反而更少，大概在180%，而限制在12核的CPU使用率更高，大概200%-210%</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> GOMAXPROCS CPU Usage </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> AUTOMAXPROCS CPU Usage </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CONTAINER ID   NAME                       CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS
da9d799578df   gomaxprocsbench-golang-1   183.19%   113.3MiB / 200MiB     56.65%    69kB / 3.29kB     135MB / 195MB     53
da9d799578df   gomaxprocsbench-golang-1   210.74%   80.86MiB / 200MiB     40.43%    69kB / 3.29kB     135MB / 195MB     69
</code></pre></div></div> <h2 id="结论">结论</h2> <p>以前没有留意到这个现象的情况之下，经常会觉得在容器层面通过Cgroups来做了限制做兜底，觉得非常保险，从某种角度来说也没错，就是没有发现在CPU高负载的情况之下，可能会因为错误的配置导致性能的下降。</p> <p>很有趣的一次探索，在常规的研发过程中，很多问题不会凸显的，只有在追求一些极致的情况下，不断去抠性能损耗的情况才会开始关注这些问题，但是往往是这些东西才是前进路上最大的助推器，否则十年如一日的Coding，最后就是LLM帮你洗头。</p> <h2 id="参考">参考</h2> <ul> <li><a href="https://github.com/uber-go/automaxprocs">https://github.com/uber-go/automaxprocs</a></li> <li><a href="https://github.com/iFurySt/GoMaxProcsBench">https://github.com/iFurySt/GoMaxProcsBench</a></li> </ul>]]></content><author><name></name></author><category term="Coding"/><category term="Go"/><summary type="html"><![CDATA[最近遇到一个有趣的问题，关于在Cgroups限制CPU资源的情况之下，设置可用核心数的时候会导致一些性能差异，因此就这个问题探究了一下]]></summary></entry><entry><title type="html">关于中国酒场文化的思考</title><link href="https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture/" rel="alternate" type="text/html" title="关于中国酒场文化的思考"/><published>2024-10-30T15:47:27+00:00</published><updated>2024-10-30T15:47:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture/"><![CDATA[<p>牛饮，是一个很常规的印象，却也蛮符合现状的。</p> <p>在中国的酒场之上，牛饮的是酒，但是品的却是人情和利益。中性客观的描述，没有褒义也没有贬义。</p> <p>就拿我所在的地区举例，在酒桌之上，正常是主人会坐在面朝大门的中间位置，这样是能在每位来宾进来的时候第一时间看到，并且一个新进来的人第一眼也通常会先看到坐在对面中间位置的主人，合乎情理，一个小细节，通常这个位置的人就是掏钱请客的人，下次你可稍微留意一下。</p> <p>通常在酒桌之上，会有通关的“仪式”或习俗，指的是在场的每一位人都会主动和别人喝一杯酒，两个关键点：</p> <ul> <li>主动</li> <li>喝酒</li> </ul> <p>通常是从你的左手边或者右手边起势，一路打下去，别人找你喝的不算。不知这种惯例的由来，但是乍想之下是有那么几分合理性在其间。通常别人找你的话，你会比较有“感觉”，你会留意到对方，所以主动找在场的每个人喝一杯酒，也算是一个认识对方的契机，同时也能给对方一种你重视他，想敬他一杯酒的感觉。</p> <p>我发现，还蛮多人厌恶中国的酒场文化，也存在一定的合理性，其中有个原因就像那句话说的一样“不信且看杯中酒，杯杯先敬有钱人”，哈哈，也是一个很有趣的现象，充分体现人性的张力。另外一些方面其实根源和前面这个点也是相同的，在酒场之上是非常能体现“阶级”的，一些人会感觉到非常push，非常不适的原因也源于此。酒场其实也是一个小社会，桌面摊开十几个人，可能扮演了社会中的各类角色。</p> <p>当然也有一些“高端局”存在，但是酒场文化本身就是社会文化、氛围的影射，你所处的社会和你所在的酒场莫名间有一些联系。所以我觉得厌恶酒场文化本身也变得很感同身受。不过凡事均有正反面，当然人在一定的范围和限度之内都有选择。或许我们坚持不懈地努力的原因是因为我们希望能有更多的选择。</p> <p>人有主观能动性，人有欲望和想法，如果你能在做决定之前思考清楚并且对自己的决定负责，那么我觉得在很多时候，不管面对的局面是好是坏，能更加从容的面对。这一切的缘由本就是人心和底气🍺</p>]]></content><author><name></name></author><category term="opinions"/><category term="thoughts"/><summary type="html"><![CDATA[牛饮，是一个很常规的印象，却也蛮符合现状的。]]></summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ifuryst.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ifuryst.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-19T13:58:56+00:00</updated><id>https://ifuryst.github.io/feed.xml</id><title type="html">ifuryst</title><subtitle>📝 &amp; 💭 </subtitle><entry><title type="html">zsh nice 5 🧐</title><link href="https://ifuryst.github.io/blog/2024/zsh-nice-5/" rel="alternate" type="text/html" title="zsh nice 5 🧐"/><published>2024-08-07T12:51:27+00:00</published><updated>2024-08-07T12:51:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/zsh-nice-5</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/zsh-nice-5/"><![CDATA[<blockquote> <p>The English Version is <a href="https://medium.com/@ifuryst./zsh-nice-5-f520a70d0f90">here</a></p> </blockquote> <p>今天在排查一个服务吞吐量上不去的问题，在做压力测试，期间刚好在观测CPU使用率，系统是32c的。 除了关注进程的CPU消耗情况，我还会关注每个核心的使用率，确保不会出现核心利用率不均衡（之前在NUMA Node时因为大量网卡软中断出现过，所以现在习惯性会关注一下） ， 一开始一切都蛮正常的，类似这样：</p> <div class="row mt-3"> <div class="col-12 col-md-8 col-lg-6 col-xl-6 col-xxl-6 mt-0 mb-0 mx-auto"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/normal_cpu_usage.2024-08-07_17-49-16-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/normal_cpu_usage.2024-08-07_17-49-16-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/normal_cpu_usage.2024-08-07_17-49-16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/normal_cpu_usage.2024-08-07_17-49-16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Normal CPU Usage </div> <p>可以看到，进程使用了28c，约为87%的使用率。整体其实已经跑了挺满的，在单核上也可以观测到us都蛮高且相对均衡（77%~90%）</p> <blockquote> <h5 id="tip">TIP</h5> <p class="block-tip">top里是按照绝对值计算百分比的，因此不是传统的0-100%的认知，比如我32c，实际上最大是跑到3200%</p> </blockquote> <div class="row mt-3"> <div class="col-12 col-md-8 col-lg-6 col-xl-6 col-xxl-6 mt-0 mb-0 mx-auto"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/abnormal_cpu_usage.2024-08-07_17-51-01-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/abnormal_cpu_usage.2024-08-07_17-51-01-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/abnormal_cpu_usage.2024-08-07_17-51-01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/abnormal_cpu_usage.2024-08-07_17-51-01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Abnormal CPU Usage </div> <p>在经过几次调整测试的过程中，突然之间，我留意到单核的us都接近0了，但是进程级别的使用率看起来和之前保持相似的使用率，此时脑子过了好几个想法：</p> <ul> <li>是不是top的显示有问题？</li> <li>top发生某种奇怪的错误统计？</li> </ul> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/grafana_total_cpu_usage.2024-08-07_17-59-21-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/grafana_total_cpu_usage.2024-08-07_17-59-21-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/grafana_total_cpu_usage.2024-08-07_17-59-21-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/grafana_total_cpu_usage.2024-08-07_17-59-21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/grafana_core_cpu_usage.2024-08-07_17-59-48-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/grafana_core_cpu_usage.2024-08-07_17-59-48-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/grafana_core_cpu_usage.2024-08-07_17-59-48-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/grafana_core_cpu_usage.2024-08-07_17-59-48.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Grafana CPU Usage: Total Left, Core Right </div> <p>然后我马上打开<code class="language-plaintext highlighter-rouge">Grafana</code>查看了机器层面的自监控，在<code class="language-plaintext highlighter-rouge">Grafana</code>上查看总体CPU使用率和分核使用率都是在高位，符合预期，略奇怪（此时仍然不知道自己粗心没留意到ni）</p> <p>结合前面的想法，我找了设备运维大佬，请教了问题，然后他一下指出ni很高，不太对，还指明正常我们的设备不会调整进程的nice。 这个时候我才恍然大悟，哦，确实ni列的值都很高呀，然后我开始从乡村土路开回了高速</p> <p>首先明确一下<a href="https://en.wikipedia.org/wiki/Nice_(Unix)">nice</a>的定义，nice越小优先级越高（范围从-20 ~ 19 or -20 ~ 20） 系统级别的正常-20，用户态进程是0，我看了一下我的进程是5🤔，what’s going on? 直到这里已经能解释清楚，为什么ni那么高了，因为进程的<code class="language-plaintext highlighter-rouge">nice=5</code>， 被认为是较低优先级的进程，同等条件下比0或者-20更加小的机会被CPU调度执行，但是因为我的进程在压测，进程过于强势，吃掉了80+%的CPU时间片， 此时就单核心的ni列代表就是CPU被低优先级的进程占用的百分比，其实这种情况下是符合预期的，也就是我们认为的单核使用率=us+ni，在这种场景下， 没有任何问题。</p> <p>回过头来，问题在于，为什么进程变成了<code class="language-plaintext highlighter-rouge">ni 5</code>？什么时候开始的？为什么？</p> <p>于是开始回溯，开始挖掘，因为压测过程中会调整各类参数，甚至也会调优一下代码，所以还是有比较多的变量，好在我能明确是那次变化出现的， 不过挖掘了半天没再出现，直到某刻突然灵光一闪，不会是<code class="language-plaintext highlighter-rouge">bg job</code>吧？因为要调整启动参数，有时候为了快速切换我会直接kill掉服务然后用类似<code class="language-plaintext highlighter-rouge">commd &amp;</code>的方式直接手动拉一下， 然后我试了一下，bingo，就是你了，然后我就写了一个shell进一步确认了一下</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="nb">sleep </span>333<span class="p">;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/bg_job_in_zsh_bash.2024-08-07_18-05-18-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/bg_job_in_zsh_bash.2024-08-07_18-05-18-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/bg_job_in_zsh_bash.2024-08-07_18-05-18-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/bg_job_in_zsh_bash.2024-08-07_18-05-18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> bg job in zsh &amp; bash </div> <p>确实是，通过这种方式启动的，会导致nice被打成5，然后我就开始在网上找资料，并且也问了ChatGPT，但是并没有任何相关的信息明确表示<code class="language-plaintext highlighter-rouge">bg job</code>会将nice设成<code class="language-plaintext highlighter-rouge">5</code>， 并且有些地方明确表示除非主动设置否则不会改变进程的nice值，此时我灵光一想，从zsh切到bash，测了一下，emmmm，确实不会改变nice，至少在bash下不会， 问题面进一步缩小了，问题出在zsh身上，继续查资料问AI，依然没有明确的结果，我还进一步检查了包括.zshrc在内相关的配置文件里也没有任何nice相关的设置，很疑惑</p> <p>过了一会我放弃在网上搜索结果了，我开始找<a href="https://zsh.sourceforge.io/Arc/git.html">zsh的源码</a>，当我把源码clone下来，我开始翻看源码， C写的，我有两个线索，一个是<code class="language-plaintext highlighter-rouge">nice=5</code>，一个是<code class="language-plaintext highlighter-rouge">bg job(&amp;)</code>，开始围绕这两个去针对性挖掘就好了，在这里我依然还是背靠大山，ChatGPT一下就帮我缩小范围到某几个文件上了，分别是</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	•	Src/parse.c：包含 zsh 的语法解析器代码。
	•	Src/exec.c：包含命令执行相关的代码。
	•	Src/jobs.c：处理作业控制和后台进程的代码。
</code></pre></div></div> <p>我在<code class="language-plaintext highlighter-rouge">jobs.c</code>找到了<code class="language-plaintext highlighter-rouge">spawnjob</code>这个函数，但是这个文件没有涉及nice的调整，继续翻看了<code class="language-plaintext highlighter-rouge">exec.c</code>，在<code class="language-plaintext highlighter-rouge">execcmd_fork</code>这个函数内部，看到了目标代码</p> <ul id="execcmd-fork" class="tab" data-tab="06a8fa97-eb4a-4f8b-ab1f-f6d9ecb7e9cd" data-name="execcmd-fork"> <li class="active" id="execcmd-fork-newest-version"> <a href="#">newest version </a> </li> <li id="execcmd-fork-oldest-version"> <a href="#">oldest version </a> </li> </ul> <ul class="tab-content" id="06a8fa97-eb4a-4f8b-ab1f-f6d9ecb7e9cd" data-name="execcmd-fork"> <li class="active"> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**/</span>
<span class="k">static</span> <span class="kt">int</span>
<span class="nf">execcmd_fork</span><span class="p">(</span><span class="n">Estate</span> <span class="n">state</span><span class="p">,</span> <span class="kt">int</span> <span class="n">how</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="n">Wordcode</span> <span class="n">varspc</span><span class="p">,</span>
	     <span class="n">LinkList</span> <span class="o">*</span><span class="n">filelistp</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oautocont</span><span class="p">,</span>
	     <span class="kt">int</span> <span class="n">close_if_forked</span><span class="p">)</span>
<span class="p">{</span>
<span class="c1">// ...</span>
<span class="cp">#ifdef HAVE_NICE
</span>    <span class="cm">/* Check if we should run background jobs at a lower priority. */</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">how</span> <span class="o">&amp;</span> <span class="n">Z_ASYNC</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">isset</span><span class="p">(</span><span class="n">BGNICE</span><span class="p">))</span> <span class="p">{</span>
	<span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">nice</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">errno</span><span class="p">)</span>
	    <span class="n">zwarn</span><span class="p">(</span><span class="s">"nice(5) failed: %e"</span><span class="p">,</span> <span class="n">errno</span><span class="p">);</span>
    <span class="p">}</span>
<span class="cp">#endif </span><span class="cm">/* HAVE_NICE */</span><span class="cp">
</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> </li> <li> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef HAVE_NICE
</span>	<span class="cm">/* Check if we should run background jobs at a lower priority. */</span>
	<span class="k">if</span> <span class="p">((</span><span class="n">how</span> <span class="o">&amp;</span> <span class="n">Z_ASYNC</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">isset</span><span class="p">(</span><span class="n">BGNICE</span><span class="p">))</span>
	    <span class="n">nice</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="cp">#endif </span><span class="cm">/* HAVE_NICE */</span><span class="cp">
</span></code></pre></div></div> </li> </ul> <p>可以看到这个条件编译（即在支持nice的系统上才会调用）内部包含了判断：当是异步作业的时候，并且<code class="language-plaintext highlighter-rouge">BGNICE</code>设置的话，就会把<code class="language-plaintext highlighter-rouge">nice设置5</code>， 翻看了一下git历史，从<code class="language-plaintext highlighter-rouge">1999年4月16日</code>最初的版本就已经带上了这个核心逻辑了，只是后来针对<code class="language-plaintext highlighter-rouge">cmd fork</code>和相关的错误捕获做了几次修订</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-08-07-zsh-nice-5/git_history.2024-08-07_18-25-28-480.webp 480w,/assets/img/2024-08-07-zsh-nice-5/git_history.2024-08-07_18-25-28-800.webp 800w,/assets/img/2024-08-07-zsh-nice-5/git_history.2024-08-07_18-25-28-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-08-07-zsh-nice-5/git_history.2024-08-07_18-25-28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Git History </div> <p>所以我们可以明确从最开始zsh就已经明确后台执行的任务优先级不会比前台的任务高，也就一直遗留至今了，至于历史原因，我是没找到任何相关的资料文献， 我看到最初<code class="language-plaintext highlighter-rouge">Inital reversion</code>是<code class="language-plaintext highlighter-rouge">Tanaka Akira</code>提交的，我写了一封邮件给他，希望能了解一下历史原因和背景。但是可惜的是，他的邮箱已经不再使用了， 被退信了。</p> <p>其实在此基础上其实还可以继续挖一下how, Z_ASYNC, BGNICE的来源，在哪些地方被更改设置了，甚至进一步再回顾一下CPU调度策略，尤其结合优先级来测一下， 但是最近有点忙，社区里还有几个PR需要处理。whatever, casual tech just for casual :)</p> <p>只是好奇心作祟下的一次探索 💀</p>]]></content><author><name></name></author><category term="casual-tech"/><category term="linux"/><summary type="html"><![CDATA[How the nice value disturb the observation for CPU usage]]></summary></entry><entry><title type="html">zsh nice 5 🧐. How the nice value disturb the… | by ifuryst | Aug, 2024 | Medium</title><link href="https://ifuryst.github.io/blog/2024/zsh-nice-5-how-the-nice-value-disturb-the-by-ifuryst-aug-2024-medium/" rel="alternate" type="text/html" title="zsh nice 5 🧐. How the nice value disturb the… | by ifuryst | Aug, 2024 | Medium"/><published>2024-08-07T00:00:00+00:00</published><updated>2024-08-07T00:00:00+00:00</updated><id>https://ifuryst.github.io/blog/2024/zsh-nice-5--how-the-nice-value-disturb-the--by-ifuryst--aug-2024--medium</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/zsh-nice-5-how-the-nice-value-disturb-the-by-ifuryst-aug-2024-medium/"><![CDATA[]]></content><author><name></name></author><category term="linux"/><category term="casual-tech"/><summary type="html"><![CDATA[Today, I was troubleshooting an issue with a service’s throughput during a stress test. While observing the CPU usage, I paid attention not only to the process’s CPU consumption but also to the usage…]]></summary></entry><entry><title type="html">TCP congestion control. Statement!!! | by ifuryst | Medium</title><link href="https://ifuryst.github.io/blog/2024/tcp-congestion-control-statement-by-ifuryst-medium/" rel="alternate" type="text/html" title="TCP congestion control. Statement!!! | by ifuryst | Medium"/><published>2024-03-12T00:00:00+00:00</published><updated>2024-03-12T00:00:00+00:00</updated><id>https://ifuryst.github.io/blog/2024/tcp-congestion-control-statement--by-ifuryst--medium</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/tcp-congestion-control-statement-by-ifuryst-medium/"><![CDATA[]]></content><author><name></name></author><category term="TCP"/><category term="networking"/><summary type="html"><![CDATA[I am sharing a draft article from a field I no longer focus on but believe the insights within are too valuable not to share. Please note, this manuscript is presented as-is :) All of these…]]></summary></entry></feed>